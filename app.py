# Code Generated by Sidekick is for learning and experimentation purposes only.

import streamlit as st
import pandas as pd
import configparser
import firebase_admin
from firebase_admin import credentials, firestore
import os
from PIL import Image

# --- SECRETS HANDLING ---
def get_firestore_client():
    try:
        creds_dict = dict(st.secrets["firestore_service_account"])
        creds_dict["private_key"] = creds_dict["private_key"].replace('\\n', '\n')
    except Exception:
        config = configparser.ConfigParser(interpolation=None)
        config.read('secrets.ini')
        fs_creds = config['firestore_service_account']
        creds_dict = {
            "type": fs_creds["type"],
            "project_id": fs_creds["project_id"],
            "private_key_id": fs_creds["private_key_id"],
            "private_key": fs_creds["private_key"].replace('\\n', '\n'),
            "client_email": fs_creds["client_email"],
            "client_id": fs_creds["client_id"],
            "auth_uri": fs_creds["auth_uri"],
            "token_uri": fs_creds["token_uri"],
            "auth_provider_x509_cert_url": fs_creds["auth_provider_x509_cert_url"],
            "client_x509_cert_url": fs_creds["client_x509_cert_url"],
            "universe_domain": fs_creds.get("universe_domain", "googleapis.com")
        }
    if not firebase_admin._apps:
        cred = credentials.Certificate(creds_dict)
        firebase_admin.initialize_app(cred)
    return firestore.client()

# --- FIRESTORE SETUP ---
db = get_firestore_client()

# --- CONFIGURATION ---
HOST_SECRET = "123"
EXCEL_FILE = "employee_info1.xlsx"

# --- SESSION STATE INITIALIZATION ---
if "game_started" not in st.session_state:
    st.session_state.game_started = False
if "host_mode" not in st.session_state:
    st.session_state.host_mode = False
if "user_name" not in st.session_state:
    st.session_state.user_name = None
if "has_registered" not in st.session_state:
    st.session_state.has_registered = False

st.title("FunFriday Meme Game")

# --- LOAD EMPLOYEE DATA ---
@st.cache_data
def load_employee_data():
    df = pd.read_excel(EXCEL_FILE)
    for col in ["Name", "Image URL"]:
        if col not in df.columns:
            raise ValueError(f"Missing required column: {col}")
    return df

try:
    df = load_employee_data()
except Exception as e:
    st.error(f"Error loading employee data: {e}")
    st.stop()

# employee_names = df["Name"].tolist()
employee_names=[name.lower() for name in df["Name"].tolist()]

# --- FIRESTORE HELPERS ---
def get_game_state():
    doc = db.collection("game_state").document("current").get()
    return doc.to_dict() if doc.exists else None

def set_game_state(state):
    db.collection("game_state").document("current").set(state)

def get_leaderboard():
    docs = db.collection("leaderboard").stream()
    return {doc.id: doc.to_dict()["score"] for doc in docs}

def set_leaderboard(leaderboard):
    for name, score in leaderboard.items():
        db.collection("leaderboard").document(name).set({"Name": name, "score": score})

def reset_firestore_state():
    db.collection("game_state").document("current").set({
        "current_index": 0,
        "current_meme": None,
        "game_started": False,
        "game_over": False
    })
    for name in employee_names:
        db.collection("leaderboard").document(name).set({"Name": name, "score": 0})

# --- HOST CONTROLS ---
with st.sidebar:
    st.header("Host Controls")
    if not st.session_state.host_mode:
        host_code = st.text_input("Enter host secret to unlock controls", type="password")
        if st.button("Unlock Host Controls"):
            if host_code == HOST_SECRET:
                st.session_state.host_mode = True
                st.success("Host controls unlocked!")
                st.rerun()
            else:
                st.error("Incorrect secret.")
    else:
        game_state = get_game_state()
        if not game_state or not game_state.get("game_started", False):
            if st.button("Start Game"):
                reset_firestore_state()
                set_game_state({
                    "current_index": 0,
                    "current_meme": None,
                    "game_started": True,
                    "game_over": False
                })
                set_leaderboard({name: 0 for name in employee_names})
                st.rerun()
        else:
            if st.button("Stop Game"):
                set_game_state({**game_state, "game_started": False})
                st.rerun()
        if st.button("Reset Game"):
            reset_firestore_state()
            st.session_state.host_mode = False
            st.rerun()

    # Leaderboard (Visible to everyone in the sidebar)
    st.subheader("Leaderboard (Top 5)")
    leaderboard = get_leaderboard()
    sorted_leaderboard = sorted(leaderboard.items(), key=lambda x: x[1], reverse=True)[:5]
    for i, (uname, score) in enumerate(sorted_leaderboard, 1):
        st.write(f"{i}. {uname}: {score}")

# --- USER REGISTRATION ---
if not st.session_state.has_registered:
    st.subheader("Enter Your Name")
    user_name = st.text_input("Your Name")
    if st.button("Register"):
        if user_name and user_name.lower() in employee_names:
            st.session_state.user_name = user_name
            st.session_state.has_registered = True
            st.success(f"Welcome, {user_name}! Wait for the host to start the game.")
            st.rerun()
        elif user_name:
            st.warning("Name not found in employee list.")
        else:
            st.warning("Please enter your name.")
    st.stop()
else:
    if st.session_state.host_mode:
        st.info(f"Welcome, {st.session_state.user_name}!. You are the host. Use the controls in the sidebar to start or manage the game.")
    else:
        st.info(f"Welcome, {st.session_state.user_name}! Wait for the host to start the game." if not get_game_state() or not get_game_state().get("game_started", False) else "")

# --- GAME PHASE ---
game_state = get_game_state()

# --- Teammate Refresh Button ---
if not st.session_state.host_mode:
    if st.button("Refresh"):
        st.rerun()

# --- Show Game Over Message to Everyone ---
if game_state and game_state.get("game_over", False):
    st.success("Game Over! All employees have had their meme.")
    st.balloons()
    st.stop()

if game_state and game_state.get("game_started", False):
    idx = game_state["current_index"]
    if idx >= len(df):
        if not game_state.get("game_over", False):
            set_game_state({**game_state, "game_started": False, "game_over": True})
        st.success("Game Over! All employees have had their meme.")
        st.balloons()
        st.stop()

    emp = df.iloc[idx]
    image_url = emp["Image URL"]

    img = Image.open(image_url)

    # Set desired width
    desired_width = 400
    aspect_ratio = img.height / img.width
    new_height = int(desired_width * aspect_ratio)

    # Resize image
    resized_img = img.resize((desired_width, new_height))

    # Store the image URL in Firestore for the current round
    if not game_state.get("current_meme"):
        set_game_state({**game_state, "current_meme": image_url})
        game_state = get_game_state()  # Refresh

    st.header("Guess Who?")
    st.image(resized_img, use_container_width=False)

    # Guessing section
    leaderboard = get_leaderboard()
    user_has_guessed = db.collection("game_state").document("current").collection("guesses").document(st.session_state.user_name).get().exists

    if not user_has_guessed:
        guess = st.selectbox("Who is this image about?", employee_names)
        if st.button("Submit Guess"):
            if st.session_state.user_name:
                correct = guess == emp["Name"]
                db.collection("game_state").document("current").collection("guesses").document(st.session_state.user_name).set({
                    "guess": guess,
                    "correct": correct
                })
                if correct:
                    leaderboard[st.session_state.user_name] = leaderboard.get(st.session_state.user_name, 0) + 1
                    set_leaderboard(leaderboard)
                    st.success("Correct!")
                else:
                    st.error("Wrong! Try again next round.")
                st.rerun()
            else:
                st.warning("Please register your name first.")
    else:
        st.info("You have already guessed this round. Wait for the next image!")

    # Next image button (host only, updates for all)
    if st.session_state.host_mode and st.button("Next Image"):
        # Clear guesses for next round
        guesses_ref = db.collection("game_state").document("current").collection("guesses")
        for doc in guesses_ref.stream():
            doc.reference.delete()
        set_game_state({
            "current_index": idx + 1,
            "current_meme": None,
            "game_started": True,
            "game_over": False
        })
        st.rerun()
