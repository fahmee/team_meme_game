# Code Generated by Sidekick is for learning and experimentation purposes only.
import streamlit as st
import pandas as pd
import openai
import time
import os

# --- CONFIGURATION ---

OPENAI_API_KEY=st.secrets["OPENAI_API_KEY"]
client = openai.OpenAI(api_key=OPENAI_API_KEY)
HOST_SECRET = "letmein"  # Change this to your host password

EXCEL_FILE = "employee_info.xlsx"  # Your Excel file with columns: Name, FunFact, Hobby, CartoonAvatarPath (optional)
AVATAR_FOLDER = "avatars"          # Folder where cartoon avatars are stored

# --- SESSION STATE INITIALIZATION ---
if "game_started" not in st.session_state:
    st.session_state.game_started = False
if "host_mode" not in st.session_state:
    st.session_state.host_mode = False
if "current_index" not in st.session_state:
    st.session_state.current_index = 0
if "leaderboard" not in st.session_state:
    st.session_state.leaderboard = {}
if "current_meme" not in st.session_state:
    st.session_state.current_meme = None
if "has_guessed_this_round" not in st.session_state:
    st.session_state.has_guessed_this_round = False
if "round_start_time" not in st.session_state:
    st.session_state.round_start_time = None
if "user_name" not in st.session_state:
    st.session_state.user_name = None
if "has_registered" not in st.session_state:
    st.session_state.has_registered = False

st.title("FunFriday Meme Game")

# --- LOAD EMPLOYEE DATA ---
@st.cache_data
def load_employee_data():
    df = pd.read_excel(EXCEL_FILE)
    # Ensure required columns exist
    for col in ["Name", "FunFact", "Hobby"]:
        if col not in df.columns:
            raise ValueError(f"Missing required column: {col}")
    return df

try:
    df = load_employee_data()
except Exception as e:
    st.error(f"Error loading employee data: {e}")
    st.stop()

employee_names = df["Name"].tolist()

# --- HOST CONTROLS ---
with st.sidebar:
    st.header("Host Controls")
    if not st.session_state.host_mode:
        host_code = st.text_input("Enter host secret to unlock controls", type="password")
        if st.button("Unlock Host Controls"):
            if host_code == HOST_SECRET:
                st.session_state.host_mode = True
                st.success("Host controls unlocked!")
            else:
                st.error("Incorrect secret.")
    else:
        if not st.session_state.game_started:
            if st.button("Start Game"):
                st.session_state.leaderboard = {name: 0 for name in employee_names}
                st.session_state.game_started = True
                st.session_state.current_index = 0
                st.session_state.current_meme = None
                st.session_state.has_guessed_this_round = False
                st.session_state.round_start_time = time.time()
        else:
            if st.button("Stop Game"):
                st.session_state.game_started = False
        if st.button("Reset Game"):
            for key in [
                "game_started", "current_index", "current_meme",
                "leaderboard", "has_guessed_this_round", "round_start_time"
            ]:
                if key in st.session_state:
                    del st.session_state[key]
            st.session_state.host_mode = False

    # Leaderboard (Host only)
    if st.session_state.host_mode:
        st.subheader("Leaderboard (Top 5)")
        sorted_leaderboard = sorted(st.session_state.leaderboard.items(), key=lambda x: x[1], reverse=True)[:5]
        for i, (uname, score) in enumerate(sorted_leaderboard, 1):
            st.write(f"{i}. {uname}: {score}")

# --- USER REGISTRATION ---
if not st.session_state.has_registered:
    st.subheader("Enter Your Name")
    user_name = st.text_input("Your Name")
    if st.button("Register"):
        if user_name and user_name in employee_names:
            st.session_state.user_name = user_name
            st.session_state.has_registered = True
            st.success(f"Welcome, {user_name}! Wait for the host to start the game.")
        elif user_name:
            st.warning("Name not found in employee list.")
        else:
            st.warning("Please enter your name.")
    st.stop()
else:
    st.info(f"Welcome, {st.session_state.user_name}! Wait for the host to start the game." if not st.session_state.game_started else "")

# --- GAME PHASE ---
if st.session_state.game_started:
    idx = st.session_state.current_index
    if idx >= len(df):
        st.success("Game Over! All employees have had their meme.")
        st.balloons()
        st.session_state.game_started = False
        st.stop()

    emp = df.iloc[idx]
    meme_prompt = f"Create a funny meme caption about this person: Fun Fact: {emp['FunFact']}, Hobby: {emp['Hobby']}"

    # Generate meme only once per round
    if st.session_state.current_meme is None:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": meme_prompt}]
        )
        st.session_state.current_meme = response.choices[0].message.content
        st.session_state.has_guessed_this_round = False
        st.session_state.round_start_time = time.time()

    st.header(f"Meme for: ???")
    st.write(f"**Meme:** {st.session_state.current_meme}")

    # Optional: Show cartoon avatar if available
    avatar_path = emp.get("CartoonAvatarPath", "")
    if isinstance(avatar_path, str) and avatar_path and os.path.exists(avatar_path):
        st.image(avatar_path, caption=f"{emp['Name']}'s Cartoon Avatar", width=200)

    # Guessing section
    if not st.session_state.has_guessed_this_round:
        guess = st.selectbox("Who is this meme about?", employee_names)
        if st.button("Submit Guess"):
            if st.session_state.user_name:
                if guess == emp["Name"]:
                    st.success("Correct!")
                    st.session_state.leaderboard[st.session_state.user_name] = st.session_state.leaderboard.get(st.session_state.user_name, 0) + 1
                else:
                    st.error("Wrong! Try again next round.")
                st.session_state.has_guessed_this_round = True
            else:
                st.warning("Please register your name first.")
    else:
        st.info("You have already guessed this round. Wait for the next meme!")

    # Timer
    time_left = max(0, 120 - int(time.time() - st.session_state.round_start_time))
    st.info(f"Time left: {time_left} seconds")

    # Next meme button (host only)
    if st.session_state.host_mode and st.button("Next Meme"):
        st.session_state.current_index += 1
        st.session_state.current_meme = None
        st.session_state.has_guessed_this_round = False
        st.session_state.round_start_time = time.time()

else:
    if st.session_state.has_registered:
        st.info("Waiting for host to start the game.")
